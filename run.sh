#!/bin/bash

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PYTHONPATH
export PYTHONPATH=$(pwd)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
VENV_PATH="./venv"
PYTHON="$VENV_PATH/bin/python"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
if [ ! -f "$PYTHON" ]; then
  echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: $PYTHON"
  echo "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: python -m venv venv"
  exit 1
fi

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PostgreSQL CLI ===
check_postgres_cli() {
  if ! command -v initdb >/dev/null 2>&1 || ! command -v pg_ctl >/dev/null 2>&1; then
    echo "‚ö†Ô∏è PostgreSQL CLI (initdb / pg_ctl) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Homebrew..."
    if ! command -v brew >/dev/null 2>&1; then
      echo "‚ùå Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ: https://brew.sh"
      exit 1
    fi
    brew install postgresql@14

    # –î–æ–±–∞–≤–ª—è–µ–º PostgreSQL –≤ PATH, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    export PATH="/opt/homebrew/opt/postgresql@14/bin:$PATH"
    echo "‚úÖ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚úÖ PostgreSQL CLI –Ω–∞–π–¥–µ–Ω."
  fi
}

check_postgres_cli

# === –ò–º–ø–æ—Ä—Ç –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ config ===
echo "üì¶ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.py..."
# üîç –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–¥—Ç—è–Ω—É–ª—Å—è –ª–∏ DB_USER –∏–∑ .env
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env"
$PYTHON -c "from app.config import config; print('[.env] DB_USER =', config.DB_USER); print('[.env] DB_NAME =', config.DB_NAME)"

PG_DATA=$($PYTHON -c "from app.config import config; print(config.BASE_UPLOAD_DIR or 'pg_data')")
PG_PORT=$($PYTHON -c "from app.config import config; print(config.DB_PORT or 5432)")

FASTAPI_HOST=$($PYTHON -c "from app.config import config; print(config.API_HOST or '0.0.0.0')")
FASTAPI_PORT=$($PYTHON -c "from app.config import config; print(config.API_PORT or 8000)")

# === –ó–∞–ø—É—Å–∫ PostgreSQL (–µ—Å–ª–∏ –Ω–µ Docker) ===
if ! pg_isready -p $PG_PORT > /dev/null 2>&1; then
  echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –Ω–∞ –ø–æ—Ä—Ç—É $PG_PORT..."
  if [ ! -d "$PG_DATA" ]; then
    echo "üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ $PG_DATA..."
    initdb -D "$PG_DATA"
  fi
  pg_ctl -D "$PG_DATA" -o "-p $PG_PORT" -l logfile start
  sleep 2
else
  echo "‚úÖ PostgreSQL —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $PG_PORT"
fi

# === –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
echo "üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)..."
$PYTHON - <<EOF
import psycopg2
from app.config import config

try:
    conn = psycopg2.connect(dbname='postgres', user=config.DB_USER, password=config.DB_PASSWORD)
    conn.autocommit = True
    cur = conn.cursor()

    cur.execute("SELECT 1 FROM pg_database WHERE datname = %s", (config.DB_NAME,))
    if not cur.fetchone():
        print(f"‚ûï –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{config.DB_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º...")
        cur.execute(f"CREATE DATABASE {config.DB_NAME}")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{config.DB_NAME}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    cur.close()
    conn.close()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
EOF




# === –ó–∞–ø—É—Å–∫ FastAPI ===
echo "üåê –ó–∞–ø—É—Å–∫ FastAPI –Ω–∞ http://$FASTAPI_HOST:$FASTAPI_PORT..."
$PYTHON -m uvicorn app.api.app:app --host $FASTAPI_HOST --port $FASTAPI_PORT &
FASTAPI_PID=$!

# === –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ===
echo "ü§ñ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞..."
$PYTHON app/bot/main.py &
BOT_PID=$!

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C) ===
trap "echo 'üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...'; kill $BOT_PID $FASTAPI_PID; pg_ctl -D $PG_DATA stop" SIGINT

# === –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===
wait
