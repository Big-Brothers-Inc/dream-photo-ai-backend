import os
import zipfile
import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from loader.bot import bot
from config.config import PHOTO_STORAGE_PATH, MIN_PHOTOS_REQUIRED, MAX_PHOTOS_ALLOWED
from utils.states import UserState
from utils.notifications import notify_user
from repository.model_repo import create_model, update_model_status
from services.replicate_service import train_model


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(PHOTO_STORAGE_PATH, exist_ok=True)


async def start_photo_upload(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_folder = os.path.join(PHOTO_STORAGE_PATH, str(user_id))
    os.makedirs(user_folder, exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for file in os.listdir(user_folder):
        file_path = os.path.join(user_folder, file)
        if os.path.isfile(file_path):
            os.remove(file_path)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.set_state(UserState.uploading_photos)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(photos=[])
    
    upload_text = (
        f"üì∏ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç {MIN_PHOTOS_REQUIRED} –¥–æ {MAX_PHOTOS_ALLOWED} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "
        f"–≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        f"‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        f"‚úÖ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n"
        f"‚úÖ –û–¥–Ω–æ—Ä–æ–¥–Ω—ã–π —Ñ–æ–Ω\n"
        f"‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏\n"
        f"‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Å–∏–ª—å–Ω—ã–º–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ, "
        f"–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
    )
    
    await message.answer(upload_text, reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")]
        ],
        resize_keyboard=True
    ))


async def process_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photos = data.get("photos", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(photos) >= MAX_PHOTOS_ALLOWED:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({MAX_PHOTOS_ALLOWED}).")
        return
    
    user_id = message.from_user.id
    user_folder = os.path.join(PHOTO_STORAGE_PATH, str(user_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
    photo = message.photo[-1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    photo_name = f"{len(photos) + 1}.jpg"
    destination = os.path.join(user_folder, photo_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, destination)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photos.append(destination)
    await state.update_data(photos=photos)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ #{len(photos)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)} –∏–∑ {MAX_PHOTOS_ALLOWED} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {MIN_PHOTOS_REQUIRED} —Ñ–æ—Ç–æ."
    )


async def finish_photo_upload(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    –°–æ–∑–¥–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photos = data.get("photos", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(photos) < MIN_PHOTOS_REQUIRED:
        await message.answer(
            f"‚ùå –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {MIN_PHOTOS_REQUIRED}, —É –≤–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
        )
        return
    
    user_id = message.from_user.id
    user_folder = os.path.join(PHOTO_STORAGE_PATH, str(user_id))
    zip_path = os.path.join(PHOTO_STORAGE_PATH, f"{user_id}.zip")
    
    # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    with zipfile.ZipFile(zip_path, "w") as zip_file:
        for photo_path in photos:
            photo_name = os.path.basename(photo_path)
            zip_file.write(photo_path, photo_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    await message.answer(
        "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
        "–ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 15-20 –º–∏–Ω—É—Ç).\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    model_name = f"model_{user_id}_{len(photos)}"
    trigger_word = f"TOK_{user_id}"
    model_id = create_model(user_id, model_name, trigger_word)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP-–∞—Ä—Ö–∏–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
        training_id = await train_model(zip_path, model_name, trigger_word)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_model_status(model_id, "training", training_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º training_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(training_id=training_id, model_id=model_id)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        await state.set_state(UserState.waiting_training)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        update_model_status(model_id, "error")
        await state.finish()


def register_photo_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    dp.register_message_handler(start_photo_upload, commands=["upload"])
    dp.register_message_handler(process_photo, content_types=["photo"], state=UserState.uploading_photos)
    dp.register_message_handler(
        finish_photo_upload,
        lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É",
        state=UserState.uploading_photos
    ) 