from fastapi import FastAPI, HTTPException
from app.config import config
from app.db.db import init_connection, close_connection
from app.api.routes import register_all_routes
from app.utils.logger import logger


def setup_lifecycle(app: FastAPI):
    @app.on_event("startup")
    async def startup_event():
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        if config.DISABLE_DB_CHECK:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        else:
            try:
                init_connection()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                raise HTTPException(status_code=500, detail="Database connection failed")

        register_all_routes(app)
        logger.info("‚úÖ –†–æ—É—Ç—ã API —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        if config.DISABLE_DB_CHECK:
            logger.warning("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            try:
                close_connection()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")
