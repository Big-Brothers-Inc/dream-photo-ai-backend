from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from app.repository.user import UserRepository
from app.repository.promo_code import PromoCodeRepository
from app.repository.promo_usage import PromoUsageRepository
from app.repository.enrollment import EnrollmentRepository

router = Router()


@router.message(F.text.regexp(r"^/promo\s+(\w+)$"))
async def apply_promo(message: types.Message, state: FSMContext):
    promo_code_input = message.text.split(maxsplit=1)[1].strip()
    user_id = message.from_user.id

    promo_repo = PromoCodeRepository()
    usage_repo = PromoUsageRepository()
    user_repo = UserRepository()
    enrollment_repo = EnrollmentRepository()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo = promo_repo.get_by_code(promo_code_input)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    if not promo_repo.is_valid_for_use(promo["promo_id"]):
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        return

    if usage_repo.has_user_used_promo(user_id, promo["promo_id"]):
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        return

    tokens = promo["tokens_amount"]

    # –®–∞–≥ 1: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º promo_usage
    usage = usage_repo.create({
        "promo_id": promo["promo_id"],
        "user_id": user_id,
        "payment_id": None
    })

    if not usage:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –®–∞–≥ 2: –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated = user_repo.increment_tokens(user_id=user_id, tokens=tokens)
    if not updated:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
        return

    # –®–∞–≥ 3: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏
    enrollment = enrollment_repo.create_with_promo(
        user_id=user_id,
        promo_id=promo["promo_id"],
        amount=tokens
    )

    if not enrollment:
        await message.answer("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω, –Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    # –ò—Ç–æ–≥: —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    user = user_repo.get_by_id(user_id)
    balance = user["tokens_left"]

    await message.answer(
        f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
        f"üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{tokens}</b> —Ç–æ–∫–µ–Ω–æ–≤.\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance}</b>",
        parse_mode="HTML"
    )
