from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandObject, Command
from app.repository.promo_code import PromoCodeRepository
from app.utils.permissions import has_admin_permission

router = Router()
repo = PromoCodeRepository()


@router.message(Command("activate_promo"))
async def activate_promo(message: Message, command: CommandObject):
    if not has_admin_permission(message.from_user.id, "CEO"):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    code = command.args.strip().upper() if command.args else None
    if not code:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /activate_promo <code>promo_code</code>")

    promo = repo.get_by_code(code)
    if not promo:
        return await message.reply(f"‚ùå –ü—Ä–æ–º–æ-–∫–æ–¥ <code>{code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

    if promo["is_active"]:
        return await message.reply(f"üîÑ –ü—Ä–æ–º–æ-–∫–æ–¥ <code>{code}</code> —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.", parse_mode="HTML")

    updated = repo.update(promo["promo_id"], {"is_active": True})
    if updated:
        await message.reply(f"‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", parse_mode="HTML")
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥.")
