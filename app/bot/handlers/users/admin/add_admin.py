from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.repository.admin import AdminRepository
from app.utils.permissions import has_admin_permission

router = Router()
repo = AdminRepository()


class AdminAddState(StatesGroup):
    selecting_access = State()


ACCESS_LEVELS = [
    ("BASE", "–ú–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ ID"),
    ("LORA", "BASE + –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ–ª–∏"),
    ("BAN", "LORA + –±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    ("HR", "BAN + –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞–º"),
    ("CEO", "–º–æ–∂–µ—Ç –≤—Å—ë –≤—ã—à–µ + –¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–æ –∫–æ–¥—ã + —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∫—É –¥–µ—Ç–∞–ª—å–Ω—É—é —Å –±–∞–±–∫–∞–º–∏")
]


@router.message(Command("add_admin"))
async def add_admin_handler(message: Message, state: FSMContext):
    # –¢–æ–ª—å–∫–æ HR –∏ –≤—ã—à–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
    if not has_admin_permission(message.from_user.id, "HR"):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <code>user_id</code>")

    try:
        user_id = int(parts[1])
    except ValueError:
        return await message.reply("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    existing_admin = repo.get_by_user_id(user_id)
    if existing_admin:
        if existing_admin["is_active"]:
            return await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_admin_status –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        else:
            repo.activate(existing_admin["admin_id"])

    await state.set_state(AdminAddState.selecting_access)
    await state.update_data(user_id=user_id, access_level=None, actor_id=message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{level} - {desc}", callback_data=f"set_access:{level}")]
        for level, desc in ACCESS_LEVELS
    ] + [[
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="access_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="access_cancel")
    ]])

    await message.answer(
        f"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ User ID: <code>{user_id}</code>\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <i>–Ω–µ –≤—ã–±—Ä–∞–Ω</i>",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("set_access:"), AdminAddState.selecting_access)
async def set_access_level(call: CallbackQuery, state: FSMContext):
    level = call.data.split(":")[1]
    data = await state.get_data()
    user_id = data["user_id"]
    actor_id = data["actor_id"]

    # HR –∏ –≤—ã—à–µ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å BASE, LORA, BAN
    # –¢–æ–ª—å–∫–æ CEO –∏ ADMIN_USER_IDS –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å HR –∏ CEO
    if level in ["HR", "CEO"] and not has_admin_permission(actor_id, "CEO"):
        await call.answer("‚ùå –¢–æ–ª—å–∫–æ CEO –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å HR –∏ –≤—ã—à–µ", show_alert=True)
        return

    await state.update_data(access_level=level)

    await call.message.edit_text(
        f"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ User ID: <code>{user_id}</code>\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <b>{level}</b>",
        reply_markup=call.message.reply_markup
    )
    await call.answer()


@router.callback_query(F.data == "access_done", AdminAddState.selecting_access)
async def finalize_admin_creation(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    access_level = data.get("access_level")
    actor_id = data["actor_id"]

    if not access_level:
        await call.message.edit_text(
            f"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ User ID: <code>{user_id}</code>\n<b>–î–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",
            reply_markup=call.message.reply_markup
        )
        await call.answer()
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    if access_level in ["HR", "CEO"] and not has_admin_permission(actor_id, "CEO"):
        await call.answer("‚ùå –¢–æ–ª—å–∫–æ CEO –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å HR –∏ –≤—ã—à–µ", show_alert=True)
        return

    admin_record = repo.get_by_user_id(user_id)
    if admin_record:
        repo.update_status(admin_id=admin_record["admin_id"], new_status=access_level)
    else:
        repo.create(user_id=user_id, status=access_level)

    await call.message.edit_text(
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <code>{user_id}</code> –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º <b>{access_level}</b>"
    )
    await state.clear()
    await call.answer()


@router.callback_query(F.data == "access_cancel", AdminAddState.selecting_access)
async def cancel_admin_creation(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]

    await call.message.edit_text(f"üö´ –ê–¥–º–∏–Ω <code>{user_id}</code> –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.clear()
    await call.answer()
