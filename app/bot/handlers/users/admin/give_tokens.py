# handlers/users/admin/give_tokens.py

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.logger import logger
from app.utils.permissions import has_admin_permission
from app.repository.user import UserRepository
from app.repository.enrollment import EnrollmentRepository
from app.repository.admin import AdminRepository
from app.repository.model import ModelRepository

router = Router()


@router.message(Command("add_tokens"))
async def cmd_add_tokens(message: Message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é (–æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not has_admin_permission(message.from_user.id, required_role="CEO"):
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="HTML"
            )
            return

        args = message.text.strip().split()[1:]
        if len(args) != 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/add_tokens user_id amount</code>",
                parse_mode="HTML"
            )
            return

        try:
            user_id = int(args[0])
            amount = int(args[1])
        except ValueError:
            await message.answer(
                "‚ùå <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –∏ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.",
                parse_mode="HTML"
            )
            return

        user_repo = UserRepository()
        enrollment_repo = EnrollmentRepository()
        admin_repo = AdminRepository()

        user = user_repo.get_by_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        if user_repo.increment_tokens(user_id, amount):
            enrollment_repo.create({
                "user_id": user_id,
                "amount": amount
            })

            username = user.get('username') or str(user_id)
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{amount}</b> —Ç–æ–∫–µ–Ω–æ–≤.",
                parse_mode="HTML"
            )

            '''
            admin = admin_repo.get_by_user_id(message.from_user.id)
            if admin:
                admin_repo.log_admin_action(
                    admin_id=admin["admin_id"],
                    action="add_tokens",
                    user_id=user_id
                )
            '''

            try:
                await message.bot.send_message(
                    user_id,
                    f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount} —Ç–æ–∫–µ–Ω–æ–≤</b>!\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['tokens_left'] + amount} —Ç–æ–∫–µ–Ω–æ–≤</b>",
                    parse_mode="HTML"
                )

                model_repo = ModelRepository()
                models = model_repo.get_models_by_user(user_id, status="ready")
                if not models:
                    builder = InlineKeyboardBuilder()
                    builder.button(text="üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="start_training")
                    builder.button(text="‚ùì –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="training_guide")

                    await message.bot.send_message(
                        user_id,
                        "ü§ñ <b>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å!</b>\n\n"
                        "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. "
                        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ!\n\n"
                        "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: <b>300 —Ç–æ–∫–µ–Ω–æ–≤</b>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ /add_tokens: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
