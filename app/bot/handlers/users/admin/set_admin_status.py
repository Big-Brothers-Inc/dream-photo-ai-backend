from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.repository.admin import AdminRepository
from app.utils.permissions import has_admin_permission
from app.config import config

router = Router()
repo = AdminRepository()


class AdminStatusState(StatesGroup):
    selecting_status = State()


ACCESS_LEVELS = [
    ("BASE", "–ú–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ ID"),
    ("LORA", "BASE + –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ–ª–∏"),
    ("BAN", "LORA + –±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    ("HR", "BAN + –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞–º"),
    ("CEO", "–º–æ–∂–µ—Ç –≤—Å—ë –≤—ã—à–µ + –¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–æ –∫–æ–¥—ã + —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∫—É –¥–µ—Ç–∞–ª—å–Ω—É—é —Å –±–∞–±–∫–∞–º–∏")
]


@router.message(Command("set_admin_status"))
async def set_admin_status_handler(message: Message, state: FSMContext):
    actor_id = message.from_user.id

    if not has_admin_permission(actor_id, "HR"):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin_status <code>admin_id</code>")

    try:
        admin_id = int(parts[1])
    except ValueError:
        return await message.reply("‚ö†Ô∏è admin_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    target_admin = repo.get_by_user_id(admin_id)
    if not target_admin or not target_admin["is_active"]:
        return await message.reply("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    # HR –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å HR, CEO –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
    if target_admin["status"] in ("HR", "CEO") or target_admin["user_id"] in config.ADMIN_USER_IDS:
        if not has_admin_permission(actor_id, "CEO"):
            return await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    await state.set_state(AdminStatusState.selecting_status)
    await state.update_data(admin_id=admin_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{level} - {desc}", callback_data=f"status:{level}")]
        for level, desc in ACCESS_LEVELS
    ] + [[
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="status_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="status_cancel")
    ]])

    await message.answer(
        f"üõ† –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{admin_id}</code>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("status:"), AdminStatusState.selecting_status)
async def select_new_status(call: CallbackQuery, state: FSMContext):
    status = call.data.split(":")[1]
    await state.update_data(new_status=status)

    data = await state.get_data()
    admin = repo.get_by_user_id(data["admin_id"])
    admin_id = admin["user_id"]

    await call.message.edit_text(
        f"üõ† –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{admin_id}</code>\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{status}</b>",
        reply_markup=call.message.reply_markup
    )
    await call.answer()


@router.callback_query(F.data == "status_done", AdminStatusState.selecting_status)
async def finalize_status_update(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    admin = repo.get_by_user_id(data["admin_id"])
    admin_id = admin["user_id"]
    new_status = data.get("new_status")

    if not new_status:
        await call.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.", show_alert=True)
        return

    result = repo.update_status(admin["admin_id"], new_status)
    if result:
        await call.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{admin_id}</code> –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ <b>{new_status}</b>"
        )
    else:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    await state.clear()
    await call.answer()


@router.callback_query(F.data == "status_cancel", AdminStatusState.selecting_status)
async def cancel_status_update(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    admin = repo.get_by_user_id(data["admin_id"])
    admin_id = admin["user_id"]

    await call.message.edit_text(f"üö´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{admin_id}</code> –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await call.answer()
