import logging
import os
from aiogram import Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.repository import get_user_repository, get_model_repository

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
training_router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class TrainingStates(StatesGroup):
    waiting_for_photos = State()
    processing_photos = State()
    confirming_training = State()


# –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è WebApp –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://example.com")
TRAINING_APP_URL = f"{WEBAPP_URL}/train-model"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
@training_router.callback_query(lambda c: c.data == "start_training")
async def process_start_training(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_repo = get_user_repository()
    if user_repo is None:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    user = user_repo.get_by_id(user_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    tokens_left = user.get('tokens_left', 0)
    training_cost = 300  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏

    if tokens_left < training_cost:
        await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {training_cost}, —É –≤–∞—Å {tokens_left}.",
                              show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Web App –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    await callback.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è miniApp
    webapp_button = InlineKeyboardBuilder()
    webapp_button.button(
        text="üì∑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
        web_app=types.WebAppInfo(url=TRAINING_APP_URL)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    message_text = "üñº *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏*\n\n"
    message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. "
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ 10-20 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
    message_text += f"–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ *{training_cost} —Ç–æ–∫–µ–Ω–æ–≤* –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} WebApp –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ URL: {TRAINING_APP_URL}")

    await callback.message.answer(message_text, reply_markup=webapp_button.as_markup(), parse_mode="Markdown")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.set_state(TrainingStates.waiting_for_photos)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
@training_router.callback_query(lambda c: c.data == "training_guide")
async def process_training_guide(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∞–π–¥ –ø–æ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    await callback.answer()

    guide_text = "üìö *–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏*\n\n"
    guide_text += "–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:\n\n"
    guide_text += "‚úÖ *–í—ã–±–µ—Ä–∏—Ç–µ 10-20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π* ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n\n"
    guide_text += "‚úÖ *–ö–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π*:\n"
    guide_text += "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –±–µ–∑ —Ç–µ–Ω–µ–π –Ω–∞ –ª–∏—Ü–µ\n"
    guide_text += "‚Ä¢ –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–Ω–µ –º–µ–Ω–µ–µ 512x512 –ø–∏–∫—Å–µ–ª–µ–π)\n"
    guide_text += "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è\n\n"

    guide_text += "‚úÖ *–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ*:\n"
    guide_text += "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –ª–∏—Ü–∞ (–∞–Ω—Ñ–∞—Å, –ø—Ä–æ—Ñ–∏–ª—å, 3/4)\n"
    guide_text += "‚Ä¢ –†–∞–∑–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞ (—É–ª—ã–±–∫–∞, —Å–µ—Ä—å–µ–∑–Ω–æ–µ –∏ —Ç.–¥.)\n"
    guide_text += "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ñ–æ–Ω—ã (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ)\n\n"

    guide_text += "‚ùå *–ò–∑–±–µ–≥–∞–π—Ç–µ*:\n"
    guide_text += "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –≤ –∫–∞–¥—Ä–µ\n"
    guide_text += "‚Ä¢ –°–Ω–∏–º–∫–æ–≤ –≤ –æ—á–∫–∞—Ö –∏–ª–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –ª–∏—Ü–∞\n"
    guide_text += "‚Ä¢ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
    guide_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã—Ö –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —è—Ä–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"

    guide_text += "‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤–∞—à–µ –ª–∏—Ü–æ, –ø–æ—ç—Ç–æ–º—É –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
    builder = InlineKeyboardBuilder()
    builder.button(text="üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="start_training")

    await callback.message.answer(guide_text, reply_markup=builder.as_markup(), parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
@training_router.message(Command("train"))
async def cmd_train(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /train –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    user_repo = get_user_repository()
    if user_repo is None:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_repo.get_by_id(user_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    tokens_left = user.get('tokens_left', 0)
    training_cost = 300

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    model_repo = get_model_repository()
    if model_repo is None:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–¥–µ–ª–µ–π")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_models = model_repo.get_models_by_user(user_id, status="ready")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "üß† *–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏*\n\n"

    if user_models:
        message_text += f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {len(user_models)} –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
        message_text += "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
    else:
        message_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"

    message_text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏: *{training_cost} —Ç–æ–∫–µ–Ω–æ–≤*\n"
    message_text += f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{tokens_left} —Ç–æ–∫–µ–Ω–æ–≤*\n\n"

    if tokens_left < training_cost:
        message_text += f"‚ö†Ô∏è –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –µ—â–µ –Ω–∞ {training_cost - tokens_left} —Ç–æ–∫–µ–Ω–æ–≤."

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–π–¥–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="start_training")
        builder.button(text="‚ùì –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="training_guide")

    builder.adjust(1)  # –°—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω—É –ø–æ–¥ –¥—Ä—É–≥–æ–π

    await message.answer(message_text, reply_markup=builder.as_markup(), parse_mode="Markdown")


def setup_training_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    """
    dp.include_router(training_router)
