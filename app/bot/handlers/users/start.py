from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

from datetime import datetime
import os

from app.repository import get_user_repository
from app.utils.logger import logger

router = Router()


@router.message(CommandStart())
async def command_start(message: types.Message, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    user_repo = get_user_repository()
    if not user_repo:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user = user_repo.get_by_id(user_id)
    if user is None:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (@{username})")
        user_data = {
            "user_id": user_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "activation_dttm": datetime.now(),
            "tokens_left": 0,
            "blocked": False,
            "language": "ru",
            "user_state": "NEW"
        }
        created_user = user_repo.create(user_data)
        if not created_user:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await send_welcome_messages(message, created_user, is_new_user=True)
    else:
        await send_welcome_messages(message, user, is_new_user=False)


async def send_welcome_messages(message: types.Message, user: dict, is_new_user: bool):
    webapp_url = os.getenv("WEBAPP_URL", "https://localhost:3000")

    greeting = "üëã –ü—Ä–∏–≤–µ—Ç" if is_new_user else "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º"
    text = (
        f"{greeting}, {hbold(message.from_user.full_name)}!\n\n"
        f"–Ø Dream Photo AI ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò."
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üñº –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", web_app=WebAppInfo(url=f"{webapp_url}/train")),
                KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{webapp_url}/cabinet"))
            ],
            [
                KeyboardButton(text="‚öôÔ∏è –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫", web_app=WebAppInfo(url=f"{webapp_url}/extra"))
            ]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

    await message.answer(text, reply_markup=keyboard)

    features = (
        f"üîÆ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        f"‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ñ–æ—Ç–æ\n"
        f"‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤, –ø–æ—Å—Ç–µ—Ä–æ–≤ –∏ —Ç.–ø.\n"
    )
    await message.answer(features, parse_mode="Markdown")

    tokens_msg = f"üí∞ *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:*\n\n–¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—á–µ—Ç—É: {user.get('tokens_left', 0)}"
    if user.get("tokens_left", 0) == 0:
        tokens_msg += "\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å."

    builder = InlineKeyboardBuilder()
    builder.button(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")
    await message.answer(tokens_msg, parse_mode="Markdown", reply_markup=builder.as_markup())
