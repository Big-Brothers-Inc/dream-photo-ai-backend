from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import logging
import os

# –ò–º–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
from app.repository import (
    init_db, close_db,
    get_user_repository, get_model_repository,
    get_generation_repository, get_payment_repository,
    get_admin_repository
)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_router = Router()

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
ADMIN_IDS = [int(id_str) for id_str in admin_ids_str.split(",") if id_str.strip().isdigit()]

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    return user_id in ADMIN_IDS


# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
async def admin_filter(message: Message) -> bool:
    return is_admin(message.from_user.id)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–∏–ª—è –∞–¥–º–∏–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
admin_router.message.filter(admin_filter)


@admin_router.message(Command("db_stats"))
async def cmd_db_stats(message: Message):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        admin_repo = get_admin_repository()
        if admin_repo is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        stats = admin_repo.get_system_stats()
        if stats:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            stats_text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
            stats_text += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('new_users', 0)}\n"
            stats_text += f"üñº –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {stats.get('total_generations', 0)}\n"
            stats_text += f"ü™ô –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('total_tokens_spent', 0)}\n"
            stats_text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats.get('total_revenue', 0) / 100} —Ä—É–±.\n"
            stats_text += f"üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {stats.get('total_gifts_sent', 0)}\n"
            stats_text += f"üß† –û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {stats.get('total_models_trained', 0)}\n"

            await message.answer(stats_text)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ db_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("get_user"))
async def cmd_get_user(message: Message, command: CommandObject):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        if not command.args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /get_user 123456789 –∏–ª–∏ /get_user @username")
            return

        user_repo = get_user_repository()
        if user_repo is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        arg = command.args.strip()
        user = None

        if arg.startswith("@"):
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = arg[1:]
            user = user_repo.get_by_username(username)
        else:
            try:
                # –ü–æ–∏—Å–∫ –ø–æ ID
                user_id = int(arg)
                user = user_repo.get_by_id(user_id)
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å @.")
                return

        if user:
            user_text = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            user_text += f"ID: {user.get('user_id')}\n"
            user_text += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.get('username', '–ù–µ—Ç')}\n"
            user_text += f"–ò–º—è: {user.get('first_name', '–ù–µ—Ç')}\n"
            user_text += f"–§–∞–º–∏–ª–∏—è: {user.get('last_name', '–ù–µ—Ç')}\n"
            user_text += f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {user.get('activation_date', '–ù–µ—Ç')}\n"
            user_text += f"–¢–æ–∫–µ–Ω–æ–≤: {user.get('tokens_left', 0)}\n"
            user_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {user.get('tokens_spent', 0)}\n"
            user_text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.get('blocked', False) else '–ù–µ—Ç'}\n"
            user_text += f"–Ø–∑—ã–∫: {user.get('language', 'ru')}\n"
            user_text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {user.get('user_state', 'new')}\n"
            user_text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {user.get('images_generated', 0)}\n"
            user_text += f"–û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {user.get('models_trained', 0)}\n"

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            builder = InlineKeyboardBuilder()
            builder.button(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user.get('blocked', False) else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                           callback_data=f"toggle_block_user:{user.get('user_id')}")
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data=f"add_tokens:{user.get('user_id')}")
            builder.button(text="–ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_models:{user.get('user_id')}")
            builder.button(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_generations:{user.get('user_id')}")
            builder.adjust(2)

            await message.answer(user_text, reply_markup=builder.as_markup())
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ get_user: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(lambda c: c.data.startswith("toggle_block_user:"))
async def callback_toggle_block_user(callback: CallbackQuery):
    """
    –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user_id = int(callback.data.split(":")[1])

        user_repo = get_user_repository()
        if user_repo is None:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        user = user_repo.get_by_id(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
        blocked = not user.get('blocked', False)

        update_data = {
            'blocked': blocked
        }

        updated_user = user_repo.update(user_id, update_data)
        if updated_user:
            action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if blocked else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action}.")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_text = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            user_text += f"ID: {updated_user.get('user_id')}\n"
            user_text += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{updated_user.get('username', '–ù–µ—Ç')}\n"
            user_text += f"–ò–º—è: {updated_user.get('first_name', '–ù–µ—Ç')}\n"
            user_text += f"–§–∞–º–∏–ª–∏—è: {updated_user.get('last_name', '–ù–µ—Ç')}\n"
            user_text += f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {updated_user.get('activation_date', '–ù–µ—Ç')}\n"
            user_text += f"–¢–æ–∫–µ–Ω–æ–≤: {updated_user.get('tokens_left', 0)}\n"
            user_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {updated_user.get('tokens_spent', 0)}\n"
            user_text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if updated_user.get('blocked', False) else '–ù–µ—Ç'}\n"
            user_text += f"–Ø–∑—ã–∫: {updated_user.get('language', 'ru')}\n"
            user_text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {updated_user.get('user_state', 'new')}\n"
            user_text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {updated_user.get('images_generated', 0)}\n"
            user_text += f"–û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {updated_user.get('models_trained', 0)}\n"

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            builder = InlineKeyboardBuilder()
            builder.button(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not updated_user.get('blocked', False) else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                           callback_data=f"toggle_block_user:{updated_user.get('user_id')}")
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data=f"add_tokens:{updated_user.get('user_id')}")
            builder.button(text="–ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_models:{updated_user.get('user_id')}")
            builder.button(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                           callback_data=f"user_generations:{updated_user.get('user_id')}")
            builder.adjust(2)

            await callback.message.edit_text(user_text, reply_markup=builder.as_markup())
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback toggle_block_user: {e}")
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@admin_router.message(Command("update_stats"))
async def cmd_update_stats(message: Message):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    """
    try:
        admin_repo = get_admin_repository()
        user_repo = get_user_repository()
        model_repo = get_model_repository()
        generation_repo = get_generation_repository()
        payment_repo = get_payment_repository()

        if not all([admin_repo, user_repo, model_repo, generation_repo, payment_repo]):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        conn = admin_repo.get_connection()
        try:
            with conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('SELECT COUNT(*) FROM "User"')
                total_users = cursor.fetchone()[0]

                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
                cursor.execute('SELECT COUNT(*) FROM "User" WHERE last_active > NOW() - INTERVAL \'30 days\'')
                active_users = cursor.fetchone()[0]

                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
                cursor.execute('SELECT COUNT(*) FROM "User" WHERE activation_date > NOW() - INTERVAL \'7 days\'')
                new_users = cursor.fetchone()[0]

                # –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                cursor.execute('SELECT COUNT(*) FROM "Generation"')
                total_generations = cursor.fetchone()[0]

                # –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
                cursor.execute('SELECT COALESCE(SUM(tokens_spent), 0) FROM "User"')
                total_tokens_spent = cursor.fetchone()[0]

                # –û–±—â–∏–π –¥–æ—Ö–æ–¥
                cursor.execute('SELECT COALESCE(SUM(amount), 0) FROM "Payment" WHERE status = \'completed\'')
                total_revenue = cursor.fetchone()[0]

                # –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤
                cursor.execute('SELECT COUNT(*) FROM "TokenGift"')
                total_gifts_sent = cursor.fetchone()[0]

                # –í—Å–µ–≥–æ –æ–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π
                cursor.execute('SELECT COUNT(*) FROM "Model" WHERE status = \'ready\'')
                total_models_trained = cursor.fetchone()[0]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_data = {
                'total_users': total_users,
                'active_users': active_users,
                'new_users': new_users,
                'total_generations': total_generations,
                'total_tokens_spent': total_tokens_spent,
                'total_revenue': total_revenue,
                'total_gifts_sent': total_gifts_sent,
                'total_models_trained': total_models_trained
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updated_stats = admin_repo.update_system_stats(stats_data)

            if updated_stats:
                await message.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_text = "üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
                stats_text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_stats.get('total_users', 0)}\n"
                stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_stats.get('active_users', 0)}\n"
                stats_text += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_stats.get('new_users', 0)}\n"
                stats_text += f"üñº –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {updated_stats.get('total_generations', 0)}\n"
                stats_text += f"ü™ô –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {updated_stats.get('total_tokens_spent', 0)}\n"
                stats_text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {updated_stats.get('total_revenue', 0) / 100} —Ä—É–±.\n"
                stats_text += f"üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {updated_stats.get('total_gifts_sent', 0)}\n"
                stats_text += f"üß† –û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {updated_stats.get('total_models_trained', 0)}\n"

                await message.answer(stats_text)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            admin_repo.release_connection(conn)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ update_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("get_loras"))
async def cmd_get_loras(message: Message):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Extra LoRA –º–æ–¥–µ–ª–µ–π
    """
    try:
        admin_repo = get_admin_repository()
        if admin_repo is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = admin_repo.get_connection()
        try:
            with conn.cursor() as cursor:
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ LoRA –º–æ–¥–µ–ª–µ–π
                cursor.execute('''
                    SELECT * FROM "ExtraLora"
                    ORDER BY extra_lora_id DESC
                    LIMIT 10
                ''')
                loras = cursor.fetchall()

                if loras:
                    loras_text = "üß† –°–ø–∏—Å–æ–∫ LoRA –º–æ–¥–µ–ª–µ–π:\n\n"

                    for lora in loras:
                        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if lora[8] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"  # is_active
                        loras_text += f"ID: {lora[0]}\n"  # extra_lora_id
                        loras_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {lora[1]}\n"  # name
                        loras_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {lora[2] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"  # description
                        loras_text += f"–¢—Ä–∏–≥–≥–µ—Ä: {lora[4]}\n"  # trigger_phrase
                        loras_text += f"–í–µ—Å: {lora[5]}\n"  # default_weight
                        loras_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {lora[7] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"  # category
                        loras_text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"

                    await message.answer(loras_text)
                else:
                    await message.answer("‚ùå LoRA –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ LoRA –º–æ–¥–µ–ª–µ–π: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            admin_repo.release_connection(conn)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ get_loras: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def setup_admin_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    dp.include_router(admin_router)
