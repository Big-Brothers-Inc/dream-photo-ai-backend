from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.admin_notifications import notify_admins_about_payment
from app.repository.user import UserRepository
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(lambda c: c.data == "add_balance")
async def process_add_balance(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–±–µ–∑ –∏–º–µ–Ω–∏"

    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await callback.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

    try:
        await notify_admins_about_payment(callback.bot, user_id, username)
        logger.info(f"–ë–∞–ª–∞–Ω—Å-–∑–∞–ø—Ä–æ—Å –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º: {e}")


@router.message(Command("check_balance"))
async def check_balance(message: Message):
    user_id = message.from_user.id
    user_repo = UserRepository()
    user = user_repo.get_by_id(user_id)

    if user:
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")

        await message.answer(
            f"üí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{user['tokens_left']}</code> —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")