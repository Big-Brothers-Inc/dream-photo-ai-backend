from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from app.repository.lora import LoraRepository
from app.utils.permissions import has_admin_permission

router = Router()
repo = LoraRepository()


class LoraCreateState(StatesGroup):
    entering_name = State()
    configuring = State()
    editing_field = State()


PARAMETERS = ["description", "lora_url", "trigger_word", "default_weight", "prompt_text", "preview_url", "sex", "is_active"]
DEFAULTS = {
    "description": "",
    "lora_url": "",
    "trigger_word": "",
    "default_weight": 1.0,
    "prompt_text": "",
    "preview_url": "",
    "is_active": True,
    "sex": False
}

PARAM_MAP = {
    "lora_edit_desc": "description",
    "lora_edit_url": "lora_url",
    "lora_edit_trigger": "trigger_word",
    "lora_edit_weight": "default_weight",
    "lora_edit_prompt": "prompt_text",
    "lora_edit_preview": "preview_url",
    "lora_edit_sex": "sex",
    "lora_edit_active": "is_active"
}


def create_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="lora_edit_desc")],
        [InlineKeyboardButton(text="üåê URL LoRA", callback_data="lora_edit_url")],
        [InlineKeyboardButton(text="üî§ –¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ", callback_data="lora_edit_trigger")],
        [InlineKeyboardButton(text="‚öñÔ∏è –í–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="lora_edit_weight")],
        [InlineKeyboardButton(text="üß† –ü—Ä–æ–º–ø—Ç", callback_data="lora_edit_prompt")],
        [InlineKeyboardButton(text="üñº –ü—Ä–µ–≤—å—é", callback_data="lora_edit_preview")],
        [InlineKeyboardButton(text="üöª –ü–æ–ª", callback_data="lora_edit_sex")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω–∞", callback_data="lora_edit_active")],
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_lora"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_lora")
        ]
    ])


def format_config_text(data):
    def truncate(text, max_len=500):
        return text if len(text) <= max_len else text[:max_len] + "..."

    return (
        f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ LoRA:\n"
        f"üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üåê URL: {data['lora_url']}\n"
        f"üî§ –¢—Ä–∏–≥–≥–µ—Ä: {data['trigger_word']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['default_weight']}\n"
        f"üß† –ü—Ä–æ–º–ø—Ç: {truncate(data['prompt_text'])}\n"
        f"üñº –ü—Ä–µ–≤—å—é: {data['preview_url']}\n"
        f"üöª –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['sex'] else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if data['is_active'] else '–ù–µ—Ç'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )


@router.message(Command("add_lora"))
async def start_creation(message: Message, state: FSMContext):
    if not has_admin_permission(message.from_user.id, "CEO"):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ LoRA:")
    await state.set_state(LoraCreateState.entering_name)


@router.message(LoraCreateState.entering_name)
async def set_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name, user_id=message.from_user.id, **DEFAULTS)
    await state.set_state(LoraCreateState.configuring)
    sent = await message.answer(format_config_text(await state.get_data()), reply_markup=create_menu())
    await state.update_data(last_bot_msg_id=sent.message_id)


@router.callback_query(F.data.startswith("lora_edit_"))
async def start_edit(callback: CallbackQuery, state: FSMContext):
    short_param = callback.data.replace("lora_edit_", "")
    real_param = PARAM_MAP.get(callback.data)

    if not real_param:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.", show_alert=True)
        return

    await state.update_data(editing_param=real_param)
    await state.set_state(LoraCreateState.editing_field)

    await callback.message.delete()
    prompt_text = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (true/false)" if real_param in ["sex", "is_active"] else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    prompt = await callback.message.answer(prompt_text)
    await state.update_data(prompt_msg_id=prompt.message_id)


@router.message(LoraCreateState.editing_field)
async def receive_value(message: Message, state: FSMContext):
    data = await state.get_data()
    param = data.get("editing_param")
    text = message.text.strip()

    try:
        if param in ["sex", "is_active"]:
            value = text.lower() in ["true", "1", "–¥–∞"]
        elif param == "default_weight":
            value = float(text)
        else:
            if len(text) > 5000:
                raise ValueError("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 5000 —Å–∏–º–≤–æ–ª–æ–≤).")
            value = text

        await state.update_data(**{param: value})
        await state.set_state(LoraCreateState.configuring)

        try:
            await message.delete()
            prompt_id = data.get("prompt_msg_id")
            if prompt_id:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        updated_data = await state.get_data()
        sent = await message.answer(format_config_text(updated_data), reply_markup=create_menu())
        await state.update_data(last_bot_msg_id=sent.message_id)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {param}: {e}")
        await message.answer(f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n<b>–û—à–∏–±–∫–∞:</b> {e}", parse_mode="HTML")


@router.callback_query(F.data == "cancel_lora")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ LoRA –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "done_lora")
async def create_lora(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    allowed_keys = {
        "name", "description", "lora_url", "trigger_word", "default_weight",
        "prompt_text", "preview_url", "user_id", "is_active", "sex"
    }
    db_data = {k: v for k, v in data.items() if k in allowed_keys and v not in [None, ""]}

    # ‚ö† –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å?
    if not db_data or "name" not in db_data or "lora_url" not in db_data or "trigger_word" not in db_data:
        await callback.message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ, URL –∏ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
        return

    print("üëâ PROMPT SAVED TO DB:", db_data.get("prompt_text"))
    print("üßæ LENGTH:", len(db_data.get("prompt_text", "")))

    lora = repo.create(db_data)

    if lora:
        await callback.message.edit_text(
            f"‚úÖ LoRA <b>{lora['name']}</b> —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"ID: {lora['lora_id']}\n"
            f"üåê URL: {lora['lora_url']}\n"
            f"üî§ –¢—Ä–∏–≥–≥–µ—Ä: {lora['trigger_word']}\n"
            f"‚öñÔ∏è –í–µ—Å: {lora['default_weight']}",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LoRA.")

    await state.clear()


